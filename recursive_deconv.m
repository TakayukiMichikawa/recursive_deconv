classdef recursive_deconv < handle
%
% Spike detection using recursive deconvolution algorithm
%
% Takayuki Michikawa 2021

properties
        
        input
        
        outputdir_cs
        
        plot_kernel                       % kernel parameter
        tau_on                            % kernel parameter
        tau_off                           % kernel parameter
        A                                 % kernel parameter
        time_vector_kernel                % kernel parameter
        tau_off_range                     % kernel parameter
        optimal_tau_off                   % kernel parameter
        kernel                            % kernel

        cell_sig_delta_R_over_R0          % cellular FRET signal
        extension                         % extension for FRET signal
        cell_sig_adjusted                 % cellular FRET signal + extension
        
        wavelet_level                     % wavelet parameter
        wavelet_SORH                      % wavelet parameter (soft or hard)
        vanishing_moment                  % wavelet parameter
        wavelet_name                      % wavelet parameter
        
        detail_coefficient_max            % a maximal value of each level of detail coefficients generated by stationary wavelet decomposition
        detail_coefficient_SD             % standard deviation of detail coefficients 
        
        scaling_factor1                   % for the thresholding of detail 1 (D1)
        scaling_factor2                   % for the thresholding of detail 2 (D2)
        scaling_factor3                   % for the thresholding of detail 3 (D3)
        scaling_factor4                   % for the thresholding of detail 4 (D4)
        
        thresh_range                      % optimization parameter
        optimal_spike_thr                 % optimization parameter
        optimal_spike_thr_index           % optimization parameter
        offset_range                      % optimization parameter
        optimal_offset                    % optimization parameter
        kernel_scaling_range              % optimization parameter
        kernel_scale                      % optimization parameter
        optimal_kernel_scale              % optimization parameter
        optimal_scaling_factor            % optimization parameter
        optimal_wavelet_thr               % optimization parameter
        optimal_wavelet_thr_index         % optimization parameter
        universal_threshold               % optimization parameter
        united_score_bias                 % optimization parameter

        CC_max_value                      % maximal cross correlation coefficient between cell_sig and reconstituted trace

        spike_time                        % spike time (frame)
        spike_time_sec                    % spike time (sec)
        
        SNR                               % signal-to-noise ratio of cellular FRET signal
        baseline_std                      % standard deviation of cellular FRET signal
        
        C_reconst_best2                   % reconstituted FRET signal
        fsig                              % frequency component of cellular FRET signal
        zsig_optimal                      % optimal zscore(fsig)
        zsig_std                          % standard deviatio of zscore(fsig)
        zsig_max                          % maximum of zscore(fsig)

        original_trace_offset
        std_subtraction_signal
        
        shifted_spikes
        false_events
        spike_rate

    end
    
    methods
        
        % constructor
        function obj= recursive_deconv(varargin)
            
            if(nargin==1)
                obj.input=varargin{1};
            else
                obj.input=0;
            end
        end
        
        % ---------------------------------------------------------------
        function make_output_directory(obj)
            
            obj.outputdir_cs = [pwd,'/spike_detect/'];
            if isempty(dir(obj.outputdir_cs))
                    mkdir([pwd,'/spike_detect/']);
            end
            
        end
        
        % ---------------------------------------------------------------
        function wavelet_params(obj)

            obj.wavelet_level     = 4;
            obj.wavelet_SORH      = 's';
            obj.vanishing_moment  = 2;
            obj.wavelet_name      = ['db',num2str(obj.vanishing_moment)];
            
        end

        % ---------------------------------------------------------------
        function set_params(obj, data)

            % spike detection threshold
            obj.thresh_range = 0.6:0.1:2;

            obj.kernel_scaling_range = 0.8:0.2:1.2;
            obj.tau_off_range        = 0.7:0.1:1.1;
            obj.offset_range         = -0.05:0.01:0;

            sampling_frequnecy = 1/data.dt;
            
            % kernel parameters, which may be specific for experimental
            % condition
            obj.tau_on  = 0.004 * sampling_frequnecy - 0.0017;
            obj.tau_off = -0.0046 * sampling_frequnecy + 2.3915;
            obj.A       = 0.0821;
            
            obj.united_score_bias = 1;
            
        end


        % ---------------------------------------------------------------
        function make_delta_R_over_R0(obj, data)
        % calculate deltaR/R0 of FRET signals
        %
        % INPUTS
        %   data.cell_sig
        %
        % OUTPUT
        %   obj.cell_sig_delta_R_over_R0
        %
            
            [total_IC_number,total_frame_number] = size(data.cell_sig);

            obj.cell_sig_delta_R_over_R0 = zeros(total_IC_number,total_frame_number);

            for index_IC = 1:total_IC_number

                cell_sig_use = detrend(data.cell_sig(index_IC,:));
                number_of_ten_frame = floor(total_frame_number/10);
                ten_frame_average = zeros(1,number_of_ten_frame);
                for i = 1:number_of_ten_frame
                    ten_frame_average(i) = mean(cell_sig_use((10*i-9):10*i));
                end
                base_R = min(ten_frame_average);
                obj.cell_sig_delta_R_over_R0(index_IC,:) = cell_sig_use - base_R;

            end

        end

        % --------------------------------------------------------------
        function stationary_wavelet_thresholding(obj, data)
        % stationary wavelet thresholding with parameter search
        %
        % INPUTS
        %   data.dt
        %   obj.cell_sig_delta_R_over_R0
        %   obj.outputdir_cs
        %
        %
        % OUTPUTS
        %   obj.CC_max_value
        %   obj.detail_coefficient_SD
        %   obj.detail_coefficient_max
        %   obj.cell_sig_adjusted
        %   obj.optimal_kernel_scale
        %   obj.optimal_offset
        %   obj.optimal_scaling_factor   
        %   obj.optimal_spike_thr
        %   obj.optimal_spike_thr_index
        %   obj.optimal_tau_off
        %   obj.optimal_wavelet_thr
        %   obj.optimal_wavelet_thr_index
        %   obj.scaling_factor1
        %   obj.scaling_factor2
        %   obj.scaling_factor3
        %   obj.scaling_factor4
        %   obj.time_vector_kernel
        %   obj.universal_threshold
        %   obj.zsig_max
        %   obj.zsig_std
        %

            % make an output directory
            outputdir = [obj.outputdir_cs,'/01_wavelet/'];
            if isempty(dir(outputdir))
                mkdir([obj.outputdir_cs,'/01_wavelet/']);
            end
            
            % adjust sample size to 2^n
            pow = ceil(log2(length(obj.cell_sig_delta_R_over_R0(1,:))));
            if rem(length(obj.cell_sig_delta_R_over_R0(1,:)),2)
                obj.extension = (2^pow-length(obj.cell_sig_delta_R_over_R0(1,1:end-1)))/2;
            else
                obj.extension = (2^pow-length(obj.cell_sig_delta_R_over_R0(1,:)))/2;
            end
            obj.cell_sig_adjusted = wextend('ac', 'sym', obj.cell_sig_delta_R_over_R0, obj.extension);  % add columns

            sampling_freq = 1/data.dt;
            
            kernel_time_step       = data.dt;
            number_of_time_step    = ceil(15/kernel_time_step);   % calculate kernel of at least 15 sec
            obj.time_vector_kernel = (0:number_of_time_step-1)*kernel_time_step;
            
            total_IC_number = size(data.cell_sig,1);
            
            obj.optimal_tau_off             = zeros(1, total_IC_number);
            obj.optimal_wavelet_thr         = zeros(total_IC_number, obj.wavelet_level);
            obj.optimal_spike_thr           = zeros(1, total_IC_number);
            obj.optimal_scaling_factor      = zeros(total_IC_number, obj.wavelet_level);
            obj.optimal_wavelet_thr_index   = zeros(total_IC_number, obj.wavelet_level);
            obj.detail_coefficient_SD       = zeros(total_IC_number, obj.wavelet_level);
            obj.detail_coefficient_max      = zeros(total_IC_number, obj.wavelet_level);
            obj.universal_threshold         = zeros(total_IC_number, obj.wavelet_level);
            obj.CC_max_value                = zeros(1,total_IC_number);
            obj.optimal_spike_thr_index     = zeros(1,total_IC_number);

            obj.zsig_max                    = zeros(1,total_IC_number);
            obj.zsig_std                    = zeros(1,total_IC_number);
            
            k_use                           = [1:total_IC_number];
            IC_sig_adjusted_use             = obj.cell_sig_adjusted;
            wavelet_level_use               = obj.wavelet_level;
            wavelet_SORH_use                = obj.wavelet_SORH;
            wavelet_name_use                = obj.wavelet_name;
            extension_use                   = obj.extension;
                
            thresh_range_use                = obj.thresh_range;

            united_score_bias_use           = obj.united_score_bias;
            
            offset_range_use                = obj.offset_range;
            kernel_scaling_range_use        = obj.kernel_scaling_range;
            tau_off_range_use               = obj.tau_off_range;
            
            kernel_time_step       = data.dt;
            number_of_time_step    = ceil(15/kernel_time_step);   % calculate kernel of at least 15 sec
            time_vector_kernel_use = (0:number_of_time_step-1)*kernel_time_step;

            tau_on_use  = obj.tau_on;
            tau_off_use = obj.tau_off;
            A_use       = obj.A;

            nt = size(data.cell_sig,2);

            zsig_max_temp = zeros(1,length(k_use));
            zsig_std_temp = zeros(1,length(k_use));
            
            parfor j = 1:length(k_use)
                
                tic
                max_SWD = [];
                thr_univthresh = [];
                detail_coefficient_SD_temp = [];
                detail_coefficient_max_temp = [];
                universal_threshold_temp = [];
                scaling_factor1_use = [];
                scaling_factor2_use = [];
                scaling_factor3_use = [];
                scaling_factor4_use = [];

                % for wavelet thresholding of level-1, 2, 3 and 4 detail coefficients (D1, D2, D3, D4)
                optimal_params_united_score = zeros(11,length(offset_range_use));
                optimal_params_R            = zeros(11,length(offset_range_use));
                optimal_params_C            = zeros(11,length(offset_range_use));
                
                % parameter serach
                              
                for jj = 1:length(offset_range_use)

                    [SWA,SWD] = swt(IC_sig_adjusted_use(j,:)+offset_range_use(1,jj), wavelet_level_use, wavelet_name_use); 

                    A1 = SWA(1, extension_use + 1:nt + extension_use);

                    dc_std                      = zeros(1, wavelet_level_use);
                    max_SWD                     = zeros(1, wavelet_level_use);
                    thr_univthresh              = zeros(1, wavelet_level_use);
                    detail_coefficient_SD_temp  = zeros(1, wavelet_level_use); 
                    detail_coefficient_max_temp = zeros(1, wavelet_level_use);
                    universal_threshold_temp    = zeros(1, wavelet_level_use);

                    for m = 1:wavelet_level_use

                        % estimation of the detail coefficients' standard deviation (dc_std)
                        dc_std(m) = median(abs(SWD(m,:)))/0.6745;
                        detail_coefficient_SD_temp(1,m) = dc_std(m);

                        % maximal values of detail coefficients
                        max_SWD(m) = max(abs(SWD(m,:)));
                        detail_coefficient_max_temp(1,m) = max_SWD(m);

                        % determination of threshold using thselect
                        thr_univthresh(1,m) = thselect(SWD(m,:)/dc_std(m),'sqtwolog');
                        thr_univthresh(1,m) = thr_univthresh(m)*dc_std(m);
                        universal_threshold_temp(1,m) = thr_univthresh(1,m);

                    end
                    
                    scaling_factor_max(1,:) = detail_coefficient_max_temp ./ universal_threshold_temp;
                    scaling_factor_max = ceil(scaling_factor_max*10)/10;
                    
                    if sampling_freq < 10
                        scaling_factor1_use = 0:scaling_factor_max(1,1)/4:scaling_factor_max(1,1);
                        scaling_factor2_use = 0:scaling_factor_max(1,2)/4:scaling_factor_max(1,2);
                        scaling_factor3_use = 0;
                        scaling_factor4_use = 0;
                    elseif sampling_freq < 10.5
                        scaling_factor1_use = 1;
                        scaling_factor2_use = 0:scaling_factor_max(1,2)/4:scaling_factor_max(1,2);
                        scaling_factor3_use = 0:scaling_factor_max(1,3)/4:scaling_factor_max(1,3);
                        scaling_factor4_use = 0;
                    else
                        scaling_factor1_use = 1;
                        scaling_factor2_use = 1;
                        scaling_factor3_use = 0:scaling_factor_max(1,3)/4:scaling_factor_max(1,3);
                        scaling_factor4_use = 0:scaling_factor_max(1,4)/4:scaling_factor_max(1,4);
                    end
                    
                    C_matrix_individual                = double( zeros(length(scaling_factor1_use), length(scaling_factor2_use), ...
                                                        length(scaling_factor3_use), length(scaling_factor4_use)) );    % cross correlation
                    T_matrix_individual                = zeros(length(scaling_factor1_use), length(scaling_factor2_use), ...
                                                        length(scaling_factor3_use), length(scaling_factor4_use));      % threshold
                    To_matrix_individual               = zeros(length(scaling_factor1_use), length(scaling_factor2_use), ...
                                                        length(scaling_factor3_use), length(scaling_factor4_use));      % tau off (kernel)
                    A_matrix_individual                = zeros(length(scaling_factor1_use), length(scaling_factor2_use), ...
                                                        length(scaling_factor3_use), length(scaling_factor4_use));      % amplitude (kernel)
                    R_matrix_individual                = double(zeros(length(scaling_factor1_use), length(scaling_factor2_use), ...
                                                        length(scaling_factor3_use), length(scaling_factor4_use)));     % residual signal

                    zsig_max_individual                = double(zeros(length(scaling_factor1_use), length(scaling_factor2_use), ...
                                                        length(scaling_factor3_use), length(scaling_factor4_use)));

                    zsig_std_individual                = double(zeros(length(scaling_factor1_use), length(scaling_factor2_use), ...
                                                        length(scaling_factor3_use), length(scaling_factor4_use)));

                    optimal_spike_thr_index_individual = zeros(length(scaling_factor1_use), length(scaling_factor2_use), ...
                                                        length(scaling_factor3_use), length(scaling_factor4_use));
                                                    
                    optimal_tau_off_index_individual   = zeros(length(scaling_factor1_use), length(scaling_factor2_use), ...
                                                        length(scaling_factor3_use), length(scaling_factor4_use));
                                                    
                    optimal_amplitude_index_individual = zeros(length(scaling_factor1_use), length(scaling_factor2_use), ...
                                                        length(scaling_factor3_use), length(scaling_factor4_use));

                    % start wavelet threshold search -------------------------

                    max_SWD1_use                = max_SWD(1);
                    max_SWD2_use                = max_SWD(2);
                    thr_univthresh1_use         = thr_univthresh(1,1);
                    thr_univthresh2_use         = thr_univthresh(1,2);
                    thr_univthresh3_use         = thr_univthresh(1,3);
                    thr_univthresh4_use         = thr_univthresh(1,4);

                    thr = zeros(1,wavelet_level_use);

                    for sf1 = 1:length(scaling_factor1_use)
                        if length(scaling_factor1_use) == 1
                            thr(1,1) = 1.05*max_SWD1_use;   % eliminate D1 by setting a large threshold
                        else
                            thr(1,1) = thr_univthresh1_use*scaling_factor1_use(sf1);
                        end

                        for sf2 = 1:length(scaling_factor2_use)
                            if length(scaling_factor2_use) == 1
                                thr(1,2) = 1.05*max_SWD2_use;
                            else
                                thr(1,2) = thr_univthresh2_use*scaling_factor2_use(sf2);
                            end

                            for sf3 = 1:length(scaling_factor3_use)
                                if length(scaling_factor3_use) == 1
                                    thr(1,3) = 0;
                                else
                                    thr(1,3) = thr_univthresh3_use*scaling_factor3_use(sf3);
                                end

                                for sf4 = 1:length(scaling_factor4_use) 
                                    if length(scaling_factor4_use) == 1
                                        thr(1,4) = 0;
                                    else
                                        thr(1,4) = thr_univthresh4_use*scaling_factor4_use(sf4);
                                    end

                                    DSWD = zeros(wavelet_level_use,2^pow);

                                    for n = 1:wavelet_level_use    % use 'obj.wavelet_level+1' if the appropriate coefficient is the subject of the wavelet thresholding
                                        DSWD(n,:) = wthresh(SWD(n,:), wavelet_SORH_use, thr(n));
                                    end

                                    clean = iswt(SWA, DSWD, wavelet_name_use); 
                                    fsigj = clean(extension_use+1:nt+extension_use);
                                    
                                    params1 = length(thresh_range_use);
                                    params2 = length(tau_off_range_use);
                                    params3 = length(kernel_scaling_range_use);
                                    CC_index_individual         = double(zeros(params1,params2,params3));
                                    residual_index_individual   = double(zeros(params1,params2,params3));
                                    
                                    for a = 1:length(kernel_scaling_range_use)
                                        
                                        for to = 1:length(tau_off_range_use)
                                            
                                            t0 = 0;     % calculation is started from t0 (sec)

                                            tau_off_scaled = tau_off_range_use(1,to)*tau_off_use;
                                            A_scaled = kernel_scaling_range_use(1,a)*A_use;
                                            func = @(t) A_scaled*(1-exp(-(t-t0)/tau_on_use))*exp(-(t-t0)/tau_off_scaled);

                                            kernel_scaled = zeros(1,length(time_vector_kernel_use));

                                            for i = 1:length(time_vector_kernel_use)
                                                kernel_scaled(1,i) = func(time_vector_kernel_use(i));
                                            end

                                            temp_fsig = horzcat(fsigj,fliplr(fsigj));      % duplicate fsig
                                            temp_sig = fdeconv(temp_fsig, kernel_scaled);  % data points are reduced by fdeconv
                                            sig = temp_sig(1:nt);                          % use original number of data points

                                            zsig = zscore(sig');

                                            std_zsig = median(abs(zsig(2:end-1,1)))/0.6745;

                                            zsig_max_individual(sf1,sf2,sf3,sf4) = max(zsig(:));
                                            zsig_std_individual(sf1,sf2,sf3,sf4) = std_zsig;

                                            for t = 1:length(thresh_range_use)

                                                % estimate standard deviation of the deconvolved signal
                                                thresh = thresh_range_use(t)*std_zsig;

                                                pp1=[zsig(1,:);zsig(1:end-1,:)];
                                                pp2=[zsig(2:end,:);zsig(end,:)];

                                                spmatj = sparse((zsig(:,1)>=thresh)&(zsig(:,1)-pp1(:,1)>=0)&(zsig(:,1)-pp2(:,1)>=0) |...
                                                    (zsig(:,1)>=2*thresh)&(zsig(:,1)-pp1(:,1)>=0)&(zsig(:,1)-pp2(:,1)>=0) |...
                                                    (zsig(:,1)>=2*thresh)&(pp1(:,1)<2*thresh)&(pp2(:,1)>2*thresh) |...
                                                    (zsig(:,1)>=3*thresh)&(zsig(:,1)-pp1(:,1)>=0)&(zsig(:,1)-pp2(:,1)>=0) |...
                                                    (zsig(:,1)>=3*thresh)&(pp1(:,1)<3*thresh)&(pp2(:,1)>3*thresh) |...
                                                    (zsig(:,1)>=4*thresh)&(zsig(:,1)-pp1(:,1)>=0)&(zsig(:,1)-pp2(:,1)>=0) |...
                                                    (zsig(:,1)>=4*thresh)&(pp1(:,1)<4*thresh)&(pp2(:,1)>4*thresh) |...
                                                    (zsig(:,1)>=5*thresh)&(zsig(:,1)-pp1(:,1)>=0)&(zsig(:,1)-pp2(:,1)>=0) |...
                                                    (zsig(:,1)>=5*thresh)&(pp1(:,1)<5*thresh)&(pp2(:,1)>5*thresh) |...
                                                    (zsig(:,1)>=6*thresh)&(zsig(:,1)-pp1(:,1)>=0)&(zsig(:,1)-pp2(:,1)>=0) |...
                                                    (zsig(:,1)>=6*thresh)&(pp1(:,1)<6*thresh)&(pp2(:,1)>6*thresh) |...
                                                    (zsig(:,1)>=7*thresh)&(zsig(:,1)-pp1(:,1)>=0)&(zsig(:,1)-pp2(:,1)>=0) |...
                                                    (zsig(:,1)>=7*thresh)&(pp1(:,1)<7*thresh)&(pp2(:,1)>7*thresh) |...
                                                    (zsig(:,1)>=8*thresh)&(zsig(:,1)-pp1(:,1)>=0)&(zsig(:,1)-pp2(:,1)>=0) |...
                                                    (zsig(:,1)>=8*thresh)&(pp1(:,1)<8*thresh)&(pp2(:,1)>8*thresh) |...
                                                    (zsig(:,1)>=9*thresh)&(zsig(:,1)-pp1(:,1)>=0)&(zsig(:,1)-pp2(:,1)>=0) |...
                                                    (zsig(:,1)>=9*thresh)&(pp1(:,1)<9*thresh)&(pp2(:,1)>9*thresh) |...
                                                    (zsig(:,1)>=10*thresh)&(zsig(:,1)-pp1(:,1)>=0)&(zsig(:,1)-pp2(:,1)>=0) |...
                                                    (zsig(:,1)>=10*thresh)&(pp1(:,1)<10*thresh)&(pp2(:,1)>10*thresh) );

                                                [sptj,~] = find(spmatj);

                                                % make binary time series data from spikes detected
                                                reconstituted_time_course_data = zeros(1,nt);
                                                if size(sptj,1) > 0
                                                    for i = 1:length(sptj)
                                                        if sptj(i) > 0
                                                            reconstituted_time_course_data(sptj(i)) = 1;
                                                        end
                                                    end
                                                end

                                                % make FRET signals from reconstituted time course

                                                C_reconst = conv(reconstituted_time_course_data, kernel_scaled);

                                                if rem(nt,2) == 1
                                                    C_reconst2_1st = C_reconst(1:nt-1);
                                                else
                                                    C_reconst2_1st = C_reconst(1:nt);
                                                end

                                                % cross correlation
                                                R_residual = corrcoef(A1,C_reconst2_1st);
                                                CC_index_individual1 = double(R_residual(2,1));

                                                % residual
                                                residual_trace = A1 - C_reconst2_1st(1,:);
                                                residual_index_individual1 = sqrt(sum(residual_trace.^2)/length(residual_trace));

                                                CC_index_individual(t,to,a)       = CC_index_individual1;
                                                residual_index_individual(t,to,a) = residual_index_individual1;
   
                                            end

                                        end    % end of spike detection threshold search ---------------

                                        % evaluate results to determine an optimal threshold value
                                        % compute united score
                                        [min_residual_value, ~] = min(residual_index_individual(:));
                                        residual_index_individual_normalized = (residual_index_individual/min_residual_value).^-1;
                                        % 2. make united score
                                        united_score_individual = (CC_index_individual + ...
                                            united_score_bias_use*residual_index_individual_normalized)/(1+united_score_bias_use);
                                        % 3. find max united score
                                        [max_vector_us, ~] = max(united_score_individual(:));

                                        for op1 = 1:length(kernel_scaling_range_use)
                                            for op2 = 1:length(tau_off_range_use)
                                                for op3 = 1:length(thresh_range_use)
                                                    if united_score_individual(op3,op2,op1) == max_vector_us
                                                        
                                                        C_matrix_individual(sf1,sf2,sf3,sf4)  = CC_index_individual(op3,op2,op1);
                                                        R_matrix_individual(sf1,sf2,sf3,sf4)  = residual_index_individual(op3,op2,op1);

                                                        T_matrix_individual(sf1,sf2,sf3,sf4)  = thresh_range_use(1,op3);
                                                        To_matrix_individual(sf1,sf2,sf3,sf4) = tau_off_range_use(1,op2);
                                                        A_matrix_individual(sf1,sf2,sf3,sf4)  = kernel_scaling_range_use(1,op1);

                                                        optimal_spike_thr_index_individual(sf1,sf2,sf3,sf4)   = op3;
                                                        optimal_tau_off_index_individual(sf1,sf2,sf3,sf4)     = op2;
                                                        optimal_amplitude_index_individual(sf1,sf2,sf3,sf4)   = op1;
                                                        
                                                    end
                                                end
                                            end
                                        end
                                    end        % end of kernel scaling factor search
                                end
                            end
                        end
                    end                        % end of the wavelet threshold search ---------------
                    
                    % evaluate search results to determine an optimal pair of wavelet thresholds for D1 - D4
                    if sampling_freq < 10
                        C_matrix_squeeze        = squeeze(C_matrix_individual(:,:,1,1));
                        R_matrix_squeeze        = squeeze(R_matrix_individual(:,:,1,1));
                        T_matrix_squeeze        = squeeze(T_matrix_individual(:,:,1,1));
                        To_matrix_squeeze       = squeeze(To_matrix_individual(:,:,1,1));
                        A_matrix_squeeze        = squeeze(A_matrix_individual(:,:,1,1));
                        spike_thr_squeeze       = squeeze(optimal_spike_thr_index_individual(:,:,1,1));
                        tau_off_squeeze         = squeeze(optimal_tau_off_index_individual(:,:,1,1));
                        amplitude_squeeze       = squeeze(optimal_amplitude_index_individual(:,:,1,1));
                        zsig_max_squeeze        = squeeze(zsig_max_individual(:,:,1,1));
                        zsig_std_squeeze        = squeeze(zsig_std_individual(:,:,1,1));
                    elseif sampling_freq < 10.5   %10.5
                        C_matrix_squeeze        = squeeze(C_matrix_individual(1,:,:,1));
                        R_matrix_squeeze        = squeeze(R_matrix_individual(1,:,:,1));
                        T_matrix_squeeze        = squeeze(T_matrix_individual(1,:,:,1));
                        To_matrix_squeeze       = squeeze(To_matrix_individual(1,:,:,1));
                        A_matrix_squeeze        = squeeze(A_matrix_individual(1,:,:,1));
                        spike_thr_squeeze       = squeeze(optimal_spike_thr_index_individual(1,:,:,1));
                        tau_off_squeeze         = squeeze(optimal_tau_off_index_individual(1,:,:,1));
                        amplitude_squeeze       = squeeze(optimal_amplitude_index_individual(1,:,:,1));
                        zsig_max_squeeze        = squeeze(zsig_max_individual(1,:,:,1));
                        zsig_std_squeeze        = squeeze(zsig_std_individual(1,:,:,1));
                    else
                        C_matrix_squeeze        = squeeze(C_matrix_individual(1,1,:,:));
                        R_matrix_squeeze        = squeeze(R_matrix_individual(1,1,:,:));
                        T_matrix_squeeze        = squeeze(T_matrix_individual(1,1,:,:));
                        To_matrix_squeeze       = squeeze(To_matrix_individual(1,1,:,:));
                        A_matrix_squeeze        = squeeze(A_matrix_individual(1,1,:,:));
                        spike_thr_squeeze       = squeeze(optimal_spike_thr_index_individual(1,1,:,:));
                        tau_off_squeeze         = squeeze(optimal_tau_off_index_individual(1,1,:,:));
                        amplitude_squeeze       = squeeze(optimal_amplitude_index_individual(1,1,:,:));
                        zsig_max_squeeze        = squeeze(zsig_max_individual(1,1,:,:));
                        zsig_std_squeeze        = squeeze(zsig_std_individual(1,1,:,:));
                    end

                    % find optimal paramters that minimize residual signals
                    % 1. normalized residual signals
                    [min_R_value, ~] = min(R_matrix_squeeze(:));
                    R_matrix_squeeze_normalized = (R_matrix_squeeze/min_R_value).^-1;
                    % 2. make united score
                    united_score_use = (C_matrix_squeeze + united_score_bias_use*R_matrix_squeeze_normalized)/...
                        (1+united_score_bias_use);
                    % 3. find optimal parameter sets
                    [max_vector_squeeze_us, ~] = max(united_score_use(:));
                    [max_C_value,~] = max(C_matrix_squeeze(:));
                    
                    for p1 = 1:size(R_matrix_squeeze,1)
                        for p2 = 1:size(R_matrix_squeeze,2)

                            if united_score_use(p1,p2) == max_vector_squeeze_us
                                optimal_params_united_score(1,jj)  = max_vector_squeeze_us;       % maximal united score
                                optimal_params_united_score(2,jj)  = p1;                          % wavelet threshold #1
                                optimal_params_united_score(3,jj)  = p2;                          % wavelet threshold #2
                                optimal_params_united_score(4,jj)  = T_matrix_squeeze(p1,p2);     % actual value (threshold)
                                optimal_params_united_score(5,jj)  = To_matrix_squeeze(p1,p2);    % actual value (tau off)
                                optimal_params_united_score(6,jj)  = A_matrix_squeeze(p1,p2);     % actual value (amplitude)
                                optimal_params_united_score(7,jj)  = spike_thr_squeeze(p1,p2);    % index        (threshold)
                                optimal_params_united_score(8,jj)  = tau_off_squeeze(p1,p2);      % index        (tau off)
                                optimal_params_united_score(9,jj)  = amplitude_squeeze(p1,p2);    % index        (amplitude)
                                optimal_params_united_score(10,jj) = zsig_max_squeeze(p1,p2);
                                optimal_params_united_score(11,jj) = zsig_std_squeeze(p1,p2);
                            end
                            if R_matrix_squeeze(p1,p2) == min_R_value
                                optimal_params_R(1,jj)  = min_R_value;
                                optimal_params_R(2,jj)  = p1;
                                optimal_params_R(3,jj)  = p2;
                                optimal_params_R(4,jj)  = T_matrix_squeeze(p1,p2);
                                optimal_params_R(5,jj)  = To_matrix_squeeze(p1,p2);
                                optimal_params_R(6,jj)  = A_matrix_squeeze(p1,p2);
                                optimal_params_R(7,jj)  = spike_thr_squeeze(p1,p2);
                                optimal_params_R(8,jj)  = tau_off_squeeze(p1,p2);
                                optimal_params_R(9,jj)  = amplitude_squeeze(p1,p2);
                                optimal_params_R(10,jj) = zsig_max_squeeze(p1,p2);
                                optimal_params_R(11,jj) = zsig_std_squeeze(p1,p2);
                            end
                            if C_matrix_squeeze(p1,p2) == max_C_value
                                optimal_params_C(1,jj)  = max_C_value;
                                optimal_params_C(2,jj)  = p1;
                                optimal_params_C(3,jj)  = p2;
                                optimal_params_C(4,jj)  = T_matrix_squeeze(p1,p2);
                                optimal_params_C(5,jj)  = To_matrix_squeeze(p1,p2);
                                optimal_params_C(6,jj)  = A_matrix_squeeze(p1,p2);
                                optimal_params_C(7,jj)  = spike_thr_squeeze(p1,p2);
                                optimal_params_C(8,jj)  = tau_off_squeeze(p1,p2);
                                optimal_params_C(9,jj)  = amplitude_squeeze(p1,p2);
                                optimal_params_C(10,jj) = zsig_max_squeeze(p1,p2);
                                optimal_params_C(11,jj) = zsig_std_squeeze(p1,p2);
                            end

                        end
                    end

                end    % end of the offset parameter serach ---------------
                
                % determine the optimal parameter set
                [~,optimal_offset_index] = max(optimal_params_united_score(1,:));
                
                % save optimal paratemers
                optimal_wavelet_thr_temp = zeros(1,wavelet_level_use);

                if sampling_freq < 10

                    optimal_wavelet_thr1_index = optimal_params_united_score(2,optimal_offset_index);
                    optimal_wavelet_thr2_index = optimal_params_united_score(3,optimal_offset_index);
                    optimal_wavelet_thr3_index = 1;
                    optimal_wavelet_thr4_index = 1;
                    optimal_wavelet_thr_temp(1, 1) = thr_univthresh(1)*scaling_factor1_use(optimal_wavelet_thr1_index);
                    optimal_wavelet_thr_temp(1, 2) = thr_univthresh(2)*scaling_factor2_use(optimal_wavelet_thr2_index);
                    optimal_wavelet_thr_temp(1, 3) = 0;
                    optimal_wavelet_thr_temp(1, 4) = 0; 

                elseif sampling_freq < 10.5   %10.5

                    optimal_wavelet_thr1_index = 1;
                    optimal_wavelet_thr2_index = optimal_params_united_score(2,optimal_offset_index);
                    optimal_wavelet_thr3_index = optimal_params_united_score(3,optimal_offset_index);
                    optimal_wavelet_thr4_index = 1;
                    optimal_wavelet_thr_temp(1, 1) = 1.05*max_SWD(1);
                    optimal_wavelet_thr_temp(1, 2) = thr_univthresh(2)*scaling_factor2_use(optimal_wavelet_thr2_index);
                    optimal_wavelet_thr_temp(1, 3) = thr_univthresh(3)*scaling_factor3_use(optimal_wavelet_thr3_index);
                    optimal_wavelet_thr_temp(1, 4) = 0;

                else

                    optimal_wavelet_thr1_index = 1;
                    optimal_wavelet_thr2_index = 1;
                    optimal_wavelet_thr3_index = optimal_params_united_score(2,optimal_offset_index);
                    optimal_wavelet_thr4_index = optimal_params_united_score(3,optimal_offset_index);
                    optimal_wavelet_thr_temp(1, 1) = 1.05*max_SWD(1);
                    optimal_wavelet_thr_temp(1, 2) = 1.05*max_SWD(2);
                    optimal_wavelet_thr_temp(1, 3) = thr_univthresh(3)*scaling_factor3_use(optimal_wavelet_thr3_index);
                    optimal_wavelet_thr_temp(1, 4) = thr_univthresh(4)*scaling_factor4_use(optimal_wavelet_thr4_index);

                end

                optimal_wavelet_thr_index_temp(j,:) = [optimal_wavelet_thr1_index,optimal_wavelet_thr2_index,...
                                                        optimal_wavelet_thr3_index,optimal_wavelet_thr4_index];
                optimal_spike_thr_temp(1,j)         = optimal_params_united_score(4,optimal_offset_index)
                optimal_tau_off_temp(1,j)           = optimal_params_united_score(5,optimal_offset_index);
                optimal_kernel_scale_temp(1,j)      = optimal_params_united_score(6,optimal_offset_index);
                optimal_offset_temp(1,j)            = offset_range_use(1,optimal_offset_index);
                
                % this parameter is used in Cellsort_CS_comparison4. Do not change.
                optimal_scaling_factor_temp      = zeros(1,wavelet_level_use);
                optimal_scaling_factor_temp(1,1) = optimal_wavelet_thr1_index; 
                optimal_scaling_factor_temp(1,2) = optimal_wavelet_thr2_index;
                optimal_scaling_factor_temp(1,3) = optimal_wavelet_thr3_index;
                optimal_scaling_factor_temp(1,4) = optimal_wavelet_thr4_index;

                detail_coefficient_SD_temp2(j,:)  = detail_coefficient_SD_temp;
                detail_coefficient_max_temp2(j,:) = detail_coefficient_max_temp;
                universal_threshold_temp2(j,:)    = universal_threshold_temp;
                optimal_wavelet_thr_temp2(j,:)    = optimal_wavelet_thr_temp;
                optimal_scaling_factor_temp2(j,:) = optimal_scaling_factor_temp;

                scaling_factor1_temp(j,:) = scaling_factor1_use;
                scaling_factor2_temp(j,:) = scaling_factor2_use;
                scaling_factor3_temp(j,:) = scaling_factor3_use;
                scaling_factor4_temp(j,:) = scaling_factor4_use;
                
                zsig_max_temp(1,j) = optimal_params_united_score(10,optimal_offset_index);
                zsig_std_temp(1,j) = optimal_params_united_score(11,optimal_offset_index);

                fprintf([' cell- ',num2str(k_use(j),'%04d'),' wavelet thresholding finished; ']);
                toc

            end

            % save parameters
            obj.scaling_factor1 = scaling_factor1_temp;
            obj.scaling_factor2 = scaling_factor2_temp;
            obj.scaling_factor3 = scaling_factor3_temp;
            obj.scaling_factor4 = scaling_factor4_temp;
            
            obj.detail_coefficient_SD = detail_coefficient_SD_temp2;
            obj.detail_coefficient_max = detail_coefficient_max_temp2;
            obj.universal_threshold = universal_threshold_temp2;
            obj.optimal_wavelet_thr = optimal_wavelet_thr_temp2;
            
            obj.optimal_wavelet_thr_index = optimal_wavelet_thr_index_temp;
            obj.optimal_spike_thr = optimal_spike_thr_temp;
            
            obj.optimal_scaling_factor = optimal_scaling_factor_temp2;

            obj.zsig_max = zsig_max_temp;
            obj.zsig_std = zsig_std_temp;
            
            obj.optimal_tau_off = optimal_tau_off_temp;
            obj.optimal_kernel_scale = optimal_kernel_scale_temp;
            obj.optimal_offset = optimal_offset_temp;

            % display optimal parameters for each cell
            h2 = figure;
            set(gcf, 'visible', 'off');
            scrsz = get(0,'ScreenSize');
            set(gcf,'Position',[1 scrsz(4) scrsz(3) scrsz(4)]);
            set(gcf,'Color',[1 1 1]);
            set(gcf, 'PaperPositionMode','auto');
            pos = get(gcf, 'Position');
            set(gcf, 'Position',pos);
            set(gcf, 'InvertHardCopy','off');

            subplot(9,1,1),plot(obj.optimal_offset);
            title('optimal offset','FontSize',20);
            axis([1 size(obj.cell_sig_delta_R_over_R0,1) min(obj.offset_range(:))-0.01 max(obj.offset_range(:))+0.01]);
            set(gca,'FontSize',20);

            for m = 1:4
                subplot(9,1,m+1),plot(obj.optimal_wavelet_thr(:,m));
                title(['optimal wavelet threshold-',num2str(m)],'FontSize',20);
                try
                axis([1 size(obj.cell_sig_delta_R_over_R0,1) min(obj.optimal_wavelet_thr(:,m)) 1.1*max(obj.optimal_wavelet_thr(:,m))]);
                catch
                    fprintf([' IC_sig number = ',num2str(size(obj.cell_sig_delta_R_over_R0,1)),'\n']);
                    fprintf([' min(obj.optimal_wavelet_thr) = ',num2str(min(obj.optimal_wavelet_thr(:,m))),'\n']);
                    fprintf([' max(obj.optimal_wavelet_thr) = ',num2str(max(obj.optimal_wavelet_thr(:,m))),'\n']);
                end
                set(gca,'FontSize',20);
            end
            
            subplot(9,1,6),plot(obj.zsig_std);
            title('zsig std','FontSize',20);
            axis([1 size(obj.cell_sig_delta_R_over_R0,1) 0.9*min(obj.zsig_std(:)) 1.1*max(obj.zsig_std(:))]);
            set(gca,'FontSize',20);
            
            subplot(9,1,7),plot(obj.optimal_kernel_scale);
            title('optimal kernel scale','FontSize',20);
            axis([1 size(obj.cell_sig_delta_R_over_R0,1) 0.9*min(obj.kernel_scaling_range(:)) 1.1*max(obj.kernel_scaling_range(:))]);
            set(gca,'FontSize',20);

            subplot(9,1,8),plot(obj.optimal_spike_thr);
            title('optimal spike threshold','FontSize',20);
            axis([1 size(obj.cell_sig_delta_R_over_R0,1) 0.9*min(obj.thresh_range(:)) 1.1*max(obj.thresh_range(:))]);
            set(gca,'FontSize',20);
            
            subplot(9,1,9),plot(obj.optimal_tau_off*obj.tau_off);
            title('optimal tau off (sec)','FontSize',20);
            axis([1 size(obj.cell_sig_delta_R_over_R0,1) 0 1.1*max(obj.tau_off_range(:))*obj.tau_off]);
            set(gca,'FontSize',20);
            
            saveas(h2,[outputdir,'optimal_params.jpg'],'jpg');
            close(h2)

        end
        
        % ---------------------------------------------------------------
        function make_kernel(obj, data)
        %
        % INPUTS
        %   data.dt
        %   data.IC_cell
        %
        % OUTPUTS
        %   obj.kernel
        %   obj.time_vector_kernel
        %
        
            total_IC_number = size(data.cell_sig,1);

            kernel_time_step = data.dt;
            number_of_time_step = ceil(15/kernel_time_step);   % calculate kernel of at least 15 sec
            obj.time_vector_kernel = (0:number_of_time_step-1)*kernel_time_step;
            
            obj.kernel = zeros(total_IC_number,length(obj.time_vector_kernel));
            
            for j = 1:total_IC_number
                
                tau_off_use   = obj.tau_off*obj.optimal_tau_off(1,j);
                amplitude_use = obj.A*obj.optimal_kernel_scale(1,j);

                [kernel_temp, ~] = kernel_calc(obj.tau_on, tau_off_use, amplitude_use, obj.time_vector_kernel);
                
                obj.kernel(j,:) = kernel_temp;
            
            end
            
            if obj.plot_kernel
                h = figure;
                plot(obj.time_vector_kernel, obj.kernel);
                axis([-1 max(obj.time_vector_kernel) 0 1.1*max(obj.kernel(:))]);
                pause(2);
                close(h);
            end
            
            %%%%%%%%%%%%%%%%
            function [kernel, kernel_normalized] = kernel_calc(tau_on, tau_off, A, time_vector)
                
                t0 = 0;     % calculation is started from t0 (sec)

                func = @(t) A*(1-exp(-(t-t0)/tau_on))*exp(-(t-t0)/tau_off);
                Apeak = A*tau_off*((tau_on/(tau_on+tau_off))^(tau_on/tau_off))*(tau_on+tau_off)^-1;

                kernel = zeros(1,length(time_vector));
                kernel_normalized = zeros(1,length(time_vector));

                for i = 1:length(time_vector)
                    kernel(1,i) = func(time_vector(i));
                    kernel_normalized(1,i) = func(time_vector(i))/Apeak;
                end

            end

        end 
        
        % ----------------------------------------------------------------
        function spike_detection(obj, data)
        %
        % INPUTS
        %   data.dt
        %   obj.outputdir_cs
        %   obj.cell_sig_delta_R_over_R0
        %   obj.cell_sig_adjusted
        %   obj.optimal_offset
        %   obj.optimal_wavelet_thr
        %   obj.detail_coefficient_max
        %   obj.optimal_kernel_scale
        %   obj.wavelet_level
        %   obj.wavelet_name
        %   obj.wavelet_SORH
        %   obj.extension
        %   obj.kernel
        %
        % OUTPUTS
        %   obj.fsig
        %   obj.zsig_optimal
        %   obj.spike_time
        %   obj.original_trace_offset(jj,:)
        %   obj.std_subtraction_signal
        %   obj.C_reconst_best2
        %   obj.spike_time_sec
        %   obj.CC_max_value
        %   obj.SNR
        %   obj.baseline_std
        %   obj.false_events
        %   obj.shifted_spikes

        
            % make an output directory
            outputdir = [obj.outputdir_cs,'/02_spike/'];
            if isempty(dir(outputdir))
                mkdir([obj.outputdir_cs,'/02_spike/']);
            end

            total_IC_number = size(data.cell_sig,1);
            
            % spike detection with optimal parameters
            if rem(size(obj.cell_sig_delta_R_over_R0,2),2) == 1
                obj.fsig = zeros(total_IC_number,size(obj.cell_sig_delta_R_over_R0,2)-1);
                sig = zeros(total_IC_number,size(obj.cell_sig_delta_R_over_R0,2)-1);
                C_reconst_best2_temp = zeros(total_IC_number,size(obj.cell_sig_delta_R_over_R0,2)-1);
                time_vector = (0:size(obj.cell_sig_delta_R_over_R0,2)-2)*data.dt;
            else
                obj.fsig = zeros(total_IC_number,size(obj.cell_sig_delta_R_over_R0,2));
                sig = zeros(total_IC_number,size(obj.cell_sig_delta_R_over_R0,2));
                C_reconst_best2_temp = zeros(total_IC_number,size(obj.cell_sig_delta_R_over_R0,2));
                time_vector = (0:size(obj.cell_sig_delta_R_over_R0,2)-1)*data.dt;
            end
            
            IC_sig_adjusted_use          = obj.cell_sig_adjusted;
            optimal_offset_use           = obj.optimal_offset;
            optimal_wavelet_thr_use      = obj.optimal_wavelet_thr;
            optimal_wavelet_thr_use1     = obj.optimal_wavelet_thr(:,1);
            optimal_wavelet_thr_use2     = obj.optimal_wavelet_thr(:,2);
            optimal_wavelet_thr_use3     = obj.optimal_wavelet_thr(:,3);
            optimal_wavelet_thr_use4     = obj.optimal_wavelet_thr(:,4);
            IC_sig_to_be_analyzed_use    = obj.cell_sig_delta_R_over_R0;
            detail_coefficient_max_use1  = obj.detail_coefficient_max(:,1);
            detail_coefficient_max_use2  = obj.detail_coefficient_max(:,2);
            detail_coefficient_max_use3  = obj.detail_coefficient_max(:,3);
            detail_coefficient_max_use4  = obj.detail_coefficient_max(:,4);
            
            optimal_kernel_scale_use     = obj.optimal_kernel_scale;

            wavelet_level_use = obj.wavelet_level;
            wavelet_name_use  = obj.wavelet_name;
            wavelet_SORH_use  = obj.wavelet_SORH;
            k_use             = [1:total_IC_number];
            extension_use     = obj.extension;
            nt                = size(obj.cell_sig_delta_R_over_R0,2);
            dt                = data.dt;
            kernel_use        = obj.kernel;
            
            block_duration = 48;  % sec
            
            pow = ceil(log2(length(IC_sig_to_be_analyzed_use(1,:))));
            
            A1                = zeros(total_IC_number, size(obj.cell_sig_delta_R_over_R0,2));

            parfor j = 1:total_IC_number
                
                [SWA,SWD] = swt(IC_sig_adjusted_use(j,:) + optimal_offset_use(1,j), wavelet_level_use, wavelet_name_use); 
                
                A1(j,:) = SWA(1, extension_use + 1:nt + extension_use);
                
                DSWDbest = zeros(wavelet_level_use, length(SWD));
                for n = 1:wavelet_level_use    % use 'obj.wavelet_level+1' if the appropriate coefficient is the subject of the wavelet thresholding
                    DSWDbest(n,:) = wthresh(SWD(n,:),  wavelet_SORH_use, optimal_wavelet_thr_use(j,n));
                end

                clean = iswt(SWA, DSWDbest, wavelet_name_use);
                fsig_temp = clean(extension_use+1:nt+extension_use);

                if rem(nt,2) == 1
                    fsig_use(j,:) = fsig_temp(1,1:nt-1);
                else
                    fsig_use(j,:) = fsig_temp;
                end
                temp_fsig = horzcat(fsig_use(j,:),fliplr(fsig_use(j,:)));    % duplicate fsig
                temp_sig  = fdeconv(temp_fsig, kernel_use(j,:));             % data points are reduced by fdeconv
                if rem(nt,2) == 1
                    sig(j,:) = temp_sig(1:nt-1); 
                else
                    sig(j,:) = temp_sig(1:nt);                               % use original number of data points
                end
            end
            
            obj.fsig = fsig_use;

            obj.zsig_optimal = zscore(sig');
            
            pp1=[obj.zsig_optimal(1,:);obj.zsig_optimal(1:end-1,:)];
            pp2=[obj.zsig_optimal(2:end,:);obj.zsig_optimal(end,:)];

            obj.spike_time              = cell(1,total_IC_number);
            SNR_temp                    = zeros(1,total_IC_number);
            std_subtraction_signal_temp = zeros(1,total_IC_number); 
            baseline_std_temp           = zeros(1,total_IC_number);
            false_events_temp           = zeros(total_IC_number, 10);
            shifted_spikes_temp         = cell(1,total_IC_number);
            
            zsig_optimal_use = obj.zsig_optimal;
            zsig_optimal_use_for_std = obj.zsig_optimal(2:end-1,:);
            zsig_optimal_use_nt = obj.zsig_optimal(1:nt,:);
            zsig_optimal_use_nt1 = obj.zsig_optimal(1:nt-1,:);

            optimal_spike_thr_use = obj.optimal_spike_thr;
            optimal_tau_off_use   = obj.optimal_tau_off;
            
            optimal_scaling_factor_use1 = obj.optimal_scaling_factor(:,1);
            optimal_scaling_factor_use2 = obj.optimal_scaling_factor(:,2);
            optimal_scaling_factor_use3 = obj.optimal_scaling_factor(:,3);
            optimal_scaling_factor_use4 = obj.optimal_scaling_factor(:,4);
            A_use = obj.A;
            fsig_use2 = obj.fsig;

            parfor j = 1:length(k_use)
                
                original_trace0 = IC_sig_to_be_analyzed_use(j,:) + optimal_offset_use(1,j);
                original_trace = A1(j,:);
                
                std_zsig = median(abs(zsig_optimal_use_for_std(:,j)))/0.6745;

                threshold_use = optimal_spike_thr_use(1,j)*std_zsig;
    
                % detect spikes
                spmat_1st = sparse((zsig_optimal_use(:,j)>=threshold_use)&(zsig_optimal_use(:,j)-pp1(:,j)>=0)&(zsig_optimal_use(:,j)-pp2(:,j)>=0) |...
                    (zsig_optimal_use(:,j)>=2*threshold_use)&(zsig_optimal_use(:,j)-pp1(:,j)>=0)&(zsig_optimal_use(:,j)-pp2(:,j)>=0) |...
                    (zsig_optimal_use(:,j)>=2*threshold_use)&(pp1(:,j)<2*threshold_use)&(pp2(:,j)>2*threshold_use) |...
                    (zsig_optimal_use(:,j)>=3*threshold_use)&(zsig_optimal_use(:,j)-pp1(:,j)>=0)&(zsig_optimal_use(:,j)-pp2(:,j)>=0) |...
                    (zsig_optimal_use(:,j)>=3*threshold_use)&(pp1(:,j)<3*threshold_use)&(pp2(:,j)>3*threshold_use) |...
                    (zsig_optimal_use(:,j)>=4*threshold_use)&(zsig_optimal_use(:,j)-pp1(:,j)>=0)&(zsig_optimal_use(:,j)-pp2(:,j)>=0) |...
                    (zsig_optimal_use(:,j)>=4*threshold_use)&(pp1(:,j)<4*threshold_use)&(pp2(:,j)>4*threshold_use) |...
                    (zsig_optimal_use(:,j)>=5*threshold_use)&(zsig_optimal_use(:,j)-pp1(:,j)>=0)&(zsig_optimal_use(:,j)-pp2(:,j)>=0) |...
                    (zsig_optimal_use(:,j)>=5*threshold_use)&(pp1(:,j)<5*threshold_use)&(pp2(:,j)>5*threshold_use) |...
                    (zsig_optimal_use(:,j)>=6*threshold_use)&(zsig_optimal_use(:,j)-pp1(:,j)>=0)&(zsig_optimal_use(:,j)-pp2(:,j)>=0) |...
                    (zsig_optimal_use(:,j)>=6*threshold_use)&(pp1(:,j)<6*threshold_use)&(pp2(:,j)>6*threshold_use) |...
                    (zsig_optimal_use(:,j)>=7*threshold_use)&(zsig_optimal_use(:,j)-pp1(:,j)>=0)&(zsig_optimal_use(:,j)-pp2(:,j)>=0) |...
                    (zsig_optimal_use(:,j)>=7*threshold_use)&(pp1(:,j)<7*threshold_use)&(pp2(:,j)>7*threshold_use) |...
                    (zsig_optimal_use(:,j)>=8*threshold_use)&(zsig_optimal_use(:,j)-pp1(:,j)>=0)&(zsig_optimal_use(:,j)-pp2(:,j)>=0) |...
                    (zsig_optimal_use(:,j)>=8*threshold_use)&(pp1(:,j)<8*threshold_use)&(pp2(:,j)>8*threshold_use) |...
                    (zsig_optimal_use(:,j)>=9*threshold_use)&(zsig_optimal_use(:,j)-pp1(:,j)>=0)&(zsig_optimal_use(:,j)-pp2(:,j)>=0) |...
                    (zsig_optimal_use(:,j)>=9*threshold_use)&(pp1(:,j)<9*threshold_use)&(pp2(:,j)>9*threshold_use) |...
                    (zsig_optimal_use(:,j)>=10*threshold_use)&(zsig_optimal_use(:,j)-pp1(:,j)>=0)&(zsig_optimal_use(:,j)-pp2(:,j)>=0) |...
                    (zsig_optimal_use(:,j)>=10*threshold_use)&(pp1(:,j)<10*threshold_use)&(pp2(:,j)>10*threshold_use) );
                
                % reconstitute trace (1st) -------------------------------
                [spt_1st,~] = find(spmat_1st);
                
                % make binary time series data from spikes detected
                reconstituted_time_course_data_1st = zeros(1,nt);
                for i = 1:length(spt_1st)
                    if spt_1st(i) > 0
                        reconstituted_time_course_data_1st(spt_1st(i)) = 1;
                    end
                end

                % make FRET signals from reconstituted time course
                C_reconst_1st = conv(reconstituted_time_course_data_1st, kernel_use(j,:));

                if rem(nt,2) == 1
                    C_reconst2_1st = C_reconst_1st(1:nt-1);
                else
                    C_reconst2_1st = C_reconst_1st(1:nt);
                end

                spt_temp = [];

                residual_std = zeros(1,6);
                
                residual_trace_1st = original_trace - C_reconst2_1st(1,:);
                residual_std(1,1) = sqrt(sum(residual_trace_1st.^2)/length(residual_trace_1st));
                
                % spike detection from residual trace 1st ----------------
                missed_detect = 1;
                [spmat_2nd, ~, false_std_2nd, ~, ~, spike_shifted_2nd, C_reconst2_2nd] =  ...
                    spike_find_cell_sig6d(residual_trace_1st, extension_use, ...
                    wavelet_level_use, wavelet_name_use, wavelet_SORH_use, pow, optimal_wavelet_thr_use(j,:), ...
                    nt, kernel_use(j,:), threshold_use, spmat_1st, missed_detect, original_trace);

                residual_trace_2nd = original_trace - C_reconst2_2nd(1,:);
                residual_std(1,2) = sqrt(sum(residual_trace_2nd.^2)/length(residual_trace_2nd));
                
                % spike detection from residual trace 2nd ----------------
                if residual_std(1,2) >= residual_std(1,1)
                    
                    missed_detect = 0;
                    [spmat_3rd, ~, false_std_3rd, ~, ~, spike_shifted_3rd, C_reconst2_3rd] =  ...
                        spike_find_cell_sig6d(residual_trace_1st, extension_use, ...
                        wavelet_level_use, wavelet_name_use, wavelet_SORH_use, pow, optimal_wavelet_thr_use(j,:), ...
                        nt, kernel_use(j,:), threshold_use, spmat_1st, missed_detect, original_trace);

                    residual_trace_3rd = original_trace - C_reconst2_3rd(1,:);
                    residual_std(1,3) = sqrt(sum(residual_trace_3rd.^2)/length(residual_trace_3rd));
                    
                    if residual_std(1,3) >= residual_std(1,1)
                        C_reconst_best2_temp(j,:) = C_reconst2_1st;
                        [spt_temp,~] = find(spmat_1st);
                        false_events_temp(j,:) = false_std_3rd;
                    elseif residual_std(1,3) < residual_std(1,1)
                        C_reconst_best2_temp(j,:) = C_reconst2_3rd;
                        [spt_temp,~] = find(spmat_3rd);
                        false_events_temp(j,:) = false_std_3rd;
                        shifted_spikes_temp{1,j} = spike_shifted_3rd;
                    end
                      
                elseif residual_std(1,2) < residual_std(1,1)
                    
                    missed_detect = 1;
                    [spmat_3rd, ~, false_std_3rd, ~, ~, spike_shifted_3rd, C_reconst2_3rd] =  ...
                        spike_find_cell_sig6d(residual_trace_2nd, extension_use, ...
                        wavelet_level_use, wavelet_name_use, wavelet_SORH_use, pow, optimal_wavelet_thr_use(j,:), ...
                        nt, kernel_use(j,:), threshold_use, spmat_2nd, missed_detect, original_trace);

                    residual_trace_3rd = original_trace - C_reconst2_3rd(1,:);
                    residual_std(1,3) = sqrt(sum(residual_trace_3rd.^2)/length(residual_trace_3rd));
                    
                    % spike detection from residual trace 3rd ------------ 
                    if residual_std(1,3) >= residual_std(1,2)
                        
                        missed_detect = 0;
                        [spmat_4th, ~, false_std_4th, ~, ~, spike_shifted_4th, C_reconst2_4th] =  ...
                            spike_find_cell_sig6d(residual_trace_2nd, extension_use, ...
                        wavelet_level_use, wavelet_name_use, wavelet_SORH_use, pow, optimal_wavelet_thr_use(j,:), ...
                        nt, kernel_use(j,:), threshold_use, spmat_2nd, missed_detect, original_trace);
                    
                        residual_trace_4th = original_trace - C_reconst2_4th(1,:);
                        residual_std(1,4) = sqrt(sum(residual_trace_4th.^2)/length(residual_trace_4th));
                        
                        if residual_std(1,4) >= residual_std(1,2)
                            C_reconst_best2_temp(j,:) = C_reconst2_2nd;
                            [spt_temp,~] = find(spmat_2nd);
                            false_events_temp(j,:) = false_std_2nd;
                            shifted_spikes_temp{1,j} = spike_shifted_2nd;
                        elseif residual_std(1,4) < residual_std(1,2)
                            C_reconst_best2_temp(j,:) = C_reconst2_4th;
                            [spt_temp,~] = find(spmat_4th);
                            false_events_temp(j,:) = false_std_4th;
                            shifted_spikes_temp{1,j} = spike_shifted_4th;
                        end
                        
                        
                    elseif residual_std(1,3) < residual_std(1,2)
                        
                        missed_detect = 1;
                        [spmat_4th, ~, false_std_4th, ~, ~, spike_shifted_4th, C_reconst2_4th] = ...
                            spike_find_cell_sig6d(residual_trace_3rd, extension_use, ...
                            wavelet_level_use, wavelet_name_use, wavelet_SORH_use, pow, optimal_wavelet_thr_use(j,:), ...
                            nt, kernel_use(j,:), threshold_use, spmat_3rd, missed_detect, original_trace);
                    
                        residual_trace_4th = original_trace - C_reconst2_4th(1,:);
                        residual_std(1,4) = sqrt(sum(residual_trace_4th.^2)/length(residual_trace_4th));
                        
                        % spike detection from residual trace 4th --------
                        if residual_std(1,4) >= residual_std(1,3)
                            
                            missed_detect = 0;
                            [spmat_5th, ~, false_std_5th, ~, ~, spike_shifted_5th, C_reconst2_5th] =  ...
                                spike_find_cell_sig6d(residual_trace_3rd, extension_use, ...
                                wavelet_level_use, wavelet_name_use, wavelet_SORH_use, pow, optimal_wavelet_thr_use(j,:), ...
                                nt, kernel_use(j,:), threshold_use, spmat_3rd, missed_detect, original_trace);

                            residual_trace_5th = original_trace - C_reconst2_5th(1,:);
                            residual_std(1,5) = sqrt(sum(residual_trace_5th.^2)/length(residual_trace_5th));
                            
                            if residual_std(1,5) >= residual_std(1,3)
                                C_reconst_best2_temp(j,:) = C_reconst2_3rd;
                                [spt_temp,~] = find(spmat_3rd);
                                false_events_temp(j,:) = false_std_3rd;
                                shifted_spikes_temp{1,j} = spike_shifted_3rd;
                            elseif residual_std(1,5) < residual_std(1,3)
                                C_reconst_best2_temp(j,:) = C_reconst2_5th;
                                [spt_temp,~] = find(spmat_5th);
                                false_events_temp(j,:) = false_std_5th;
                                shifted_spikes_temp{1,j} = spike_shifted_5th;
                            end
                            
                        elseif residual_std(1,4) < residual_std(1,3)
                            
                            missed_detect = 1;
                            [spmat_5th, ~, false_std_5th, ~, ~, spike_shifted_5th, C_reconst2_5th] = ...
                                spike_find_cell_sig6d(residual_trace_4th, extension_use, ...
                                wavelet_level_use, wavelet_name_use, wavelet_SORH_use, pow, optimal_wavelet_thr_use(j,:), ...
                                nt, kernel_use(j,:), threshold_use, spmat_4th, missed_detect, original_trace);

                            residual_trace_5th = original_trace - C_reconst2_5th(1,:);
                            residual_std(1,5) = sqrt(sum(residual_trace_5th.^2)/length(residual_trace_5th));
                            
                            if residual_std(1,5) >= residual_std(1,4)
                                
                                missed_detect = 0;
                                [spmat_6th, ~, false_std_6th, ~, ~, spike_shifted_6th, C_reconst2_6th] =  ...
                                    spike_find_cell_sig6d(residual_trace_4th, extension_use, ...
                                    wavelet_level_use, wavelet_name_use, wavelet_SORH_use, pow, optimal_wavelet_thr_use(j,:), ...
                                    nt, kernel_use(j,:), threshold_use, spmat_4th, missed_detect, original_trace);

                                residual_trace_6th = original_trace - C_reconst2_6th(1,:);
                                residual_std(1,6) = sqrt(sum(residual_trace_6th.^2)/length(residual_trace_6th));
                                
                                if residual_std(1,6) >= residual_std(1,4)
                                    C_reconst_best2_temp(j,:) = C_reconst2_4th;
                                    [spt_temp,~] = find(spmat_4th);
                                    false_events_temp(j,:) = false_std_4th;
                                    shifted_spikes_temp{1,j} = spike_shifted_4th;
                                elseif residual_std(1,6) < residual_std(1,4)
                                    C_reconst_best2_temp(j,:) = C_reconst2_6th;
                                    [spt_temp,~] = find(spmat_6th);
                                    false_events_temp(j,:) = false_std_6th;
                                    shifted_spikes_temp{1,j} = spike_shifted_6th;
                                end

                            elseif residual_std(1,5) < residual_std(1,4)
                                
                                missed_detect = 0;
                                [spmat_6th, ~, false_std_6th, ~, ~, spike_shifted_6th, C_reconst2_6th] = ...
                                    spike_find_cell_sig6d(residual_trace_5th, extension_use, ...
                                    wavelet_level_use, wavelet_name_use, wavelet_SORH_use, pow, optimal_wavelet_thr_use(j,:), ...
                                    nt, kernel_use(j,:), threshold_use, spmat_5th, missed_detect, original_trace);

                                residual_trace_6th = original_trace - C_reconst2_6th(1,:);
                                residual_std(1,6) = sqrt(sum(residual_trace_5th.^2)/length(residual_trace_6th));
                                
                                if residual_std(1,6) >= residual_std(1,5)
                                    C_reconst_best2_temp(j,:) = C_reconst2_5th;
                                    [spt_temp,~] = find(spmat_5th);
                                    false_events_temp(j,:) = false_std_5th;
                                    shifted_spikes_temp{1,j} = spike_shifted_5th;
                                elseif residual_std(1,6) < residual_std(1,5)
                                    C_reconst_best2_temp(j,:) = C_reconst2_6th;
                                    [spt_temp,~] = find(spmat_6th);
                                    false_events_temp(j,:) = false_std_6th;
                                    shifted_spikes_temp{1,j} = spike_shifted_6th;
                                end
                            end
                        end    
                    end     
                end

                if rem(nt,2) == 1
                    spt_temp = spt_temp(spt_temp < nt-1);   % remove the end-point artifact
                else
                    spt_temp = spt_temp(spt_temp < nt);
                end
                
                spt_temp = spt_temp(spt_temp > 1);         % remove the start-point artifact

                spike_time_temp{1,j} = spt_temp;                
  
                % make binary time series data from spikes detected
                if rem(nt,2) == 1
                    reconstituted_time_course_data_best = zeros(1,nt-1);
                else
                    reconstituted_time_course_data_best = zeros(1,nt);
                end

                for i = 1:length(spt_temp)
                    if spt_temp(i) > 0
                        reconstituted_time_course_data_best(spt_temp(i)) = 1;
                    end
                end
                
                % cross correlation
                C_best = corrcoef(IC_sig_to_be_analyzed_use(j,:),C_reconst_best2_temp(j,:));
                
                CC_max_value_temp(1,j) = C_best(2,1);    % <------------------
                
                % signal-to-noise ratio
                subtraction_signal = original_trace - C_reconst_best2_temp(j,:);
                baseline_std_temp(1,j) = median(abs(original_trace))/0.6745;
                SNR_temp(1,j) = (A_use*optimal_kernel_scale_use(1,j))/ baseline_std_temp(1,j);

                std_subtraction_signal_temp(1,j) = sqrt(sum(subtraction_signal.^2)/length(subtraction_signal));

                if C_best(2,1) > 0.3
                    
                    % all trace
                    h1 = figure;
                    set(gcf, 'visible', 'off');
                    scrsz = get(0,'ScreenSize');
                    set(gcf,'Position',[1 scrsz(4) scrsz(3) scrsz(4)]);
                    set(gcf,'Color',[1 1 1]);
                    set(gcf, 'PaperPositionMode','auto');
                    pos = get(gcf, 'Position');
                    set(gcf, 'Position',pos);
                    set(gcf, 'InvertHardCopy','off');
        
                    subplot(6,1,1),plot(time_vector, original_trace0);
                    axis([0 max(time_vector) 1.2*min(original_trace0) 1.2*max(original_trace0)]);
                    title(['cell-',num2str(k_use(j))],'FontSize',16);
        
                    subplot(6,1,2),plot(time_vector, fsig_use2(j,:));
                    try
                        axis([0 max(time_vector) 1.2*min(fsig_use2(j,:)) 1.2*max(fsig_use2(j,:))]);
                    catch
                        fprintf([' subplot(6,1,2) error','\n']);
                    end
                    
                    sampling_freq = 1/dt;
                    if sampling_freq < 10
                        title(['thr1 = ',num2str(optimal_wavelet_thr_use1(j,:)),' (',num2str(optimal_scaling_factor_use1(j,:)),...
                            ') / max = ',num2str(detail_coefficient_max_use1(j,:)),...
                            ', thr2 = ',num2str(optimal_wavelet_thr_use2(j,:)),' (',num2str(optimal_scaling_factor_use2(j,:)),...
                            ') / max = ',num2str(detail_coefficient_max_use2(j,:))],'FontSize',16);
                    elseif sampling_freq < 10.5   %10.5
                        title(['thr2 = ',num2str(optimal_wavelet_thr_use2(j,:)),' (',num2str(optimal_scaling_factor_use2(j,:)),...
                            ') / max = ',num2str(detail_coefficient_max_use2(j,:)),...
                            ', thr3 = ',num2str(optimal_wavelet_thr_use3(j,:)),' (',num2str(optimal_scaling_factor_use3(j,:)),...
                            ') / max = ',num2str(detail_coefficient_max_use3(j,:))],'FontSize',16);
                    else
                        title(['thr3 = ',num2str(optimal_wavelet_thr_use3(j,:)),' (',num2str(optimal_scaling_factor_use3(j,:)),...
                            ') / max = ',num2str(detail_coefficient_max_use3(j,:)),...
                            ', thr4 = ',num2str(optimal_wavelet_thr_use4(j,:)),' (',num2str(optimal_scaling_factor_use4(j,:)),...
                            ') / max = ',num2str(detail_coefficient_max_use4(j,:))],'FontSize',16);
                    end
        
                    subplot(6,1,3),plot(time_vector, zsig_optimal_use(:,j));
                    hold on;
                    if rem(nt,2) == 1
                        subplot(6,1,3),plot(time_vector,ones(1,nt-1)*threshold_use,'r-');
                        subplot(6,1,3),plot(time_vector,ones(1,nt-1)*2*threshold_use,'r-');
                        subplot(6,1,3),plot(time_vector,ones(1,nt-1)*3*threshold_use,'r-');
                        subplot(6,1,3),plot(time_vector,ones(1,nt-1)*4*threshold_use,'r-');
                        subplot(6,1,3),plot(time_vector,ones(1,nt-1)*5*threshold_use,'b-');
                        subplot(6,1,3),plot(time_vector,ones(1,nt-1)*6*threshold_use,'r-');
                        subplot(6,1,3),plot(time_vector,ones(1,nt-1)*7*threshold_use,'r-');
                        subplot(6,1,3),plot(time_vector,ones(1,nt-1)*8*threshold_use,'r-');
                        subplot(6,1,3),plot(time_vector,ones(1,nt-1)*9*threshold_use,'r-');
                        subplot(6,1,3),plot(time_vector,ones(1,nt-1)*10*threshold_use,'r-');
                        hold off;
                        if 1.2*max(zsig_optimal_use_nt1(:,j)) > 10
                            ymax = 10;
                        else
                            ymax = 1.2*max(zsig_optimal_use_nt1(:,j));
                        end
                        if ymax > 2
                            ymin = -2;
                        else
                            ymin = -ymax;
                        end
                        try
                            axis([0 max(time_vector) ymin ymax]);
                        catch
                            fprintf([' subplot(6,1,3) error!','\n']);
                        end
                        title(['R = ',num2str(C_best(2,1)),...
                            ', threshold = ',num2str(optimal_spike_thr_use(1,j))],'FontSize',16);
                    else
                        subplot(6,1,3),plot(time_vector,ones(1,nt)*threshold_use,'r-');
                        subplot(6,1,3),plot(time_vector,ones(1,nt)*2*threshold_use,'r-');
                        subplot(6,1,3),plot(time_vector,ones(1,nt)*3*threshold_use,'r-');
                        subplot(6,1,3),plot(time_vector,ones(1,nt)*4*threshold_use,'r-');
                        subplot(6,1,3),plot(time_vector,ones(1,nt)*5*threshold_use,'b-');
                        subplot(6,1,3),plot(time_vector,ones(1,nt)*6*threshold_use,'r-');
                        subplot(6,1,3),plot(time_vector,ones(1,nt)*7*threshold_use,'r-');
                        subplot(6,1,3),plot(time_vector,ones(1,nt)*8*threshold_use,'r-');
                        subplot(6,1,3),plot(time_vector,ones(1,nt)*9*threshold_use,'r-');
                        subplot(6,1,3),plot(time_vector,ones(1,nt)*10*threshold_use,'r-');
                        hold off;
                        if 1.2*max(zsig_optimal_use_nt(:,j)) > 10
                            ymax = 10;
                        else
                            ymax = 1.2*max(zsig_optimal_use_nt(:,j));
                        end
                        if ymax > 2
                            ymin = -2;
                        else
                            ymin = -ymax;
                        end
                        try
                            axis([0 max(time_vector) ymin ymax]);
                        catch
                            fprintf([' subplot(6,1,3) error!','\n']);
                        end
                        title(['R = ',num2str(C_best(2,1)),...
                            ', threshold = ',num2str(optimal_spike_thr_use(1,j))],'FontSize',16);
                    end
        
                    subplot(6,1,4),plot(time_vector, C_reconst_best2_temp(j,:), 'r');
                    hold on
                    subplot(6,1,4),plot(time_vector, original_trace);
                    hold off
                    axis([0 max(time_vector) 1.2*min(original_trace) 1.2*max(original_trace)]);
                    title(['sf1=',num2str(optimal_scaling_factor_use1(j,:)),...
                            ', sf2=',num2str(optimal_scaling_factor_use2(j,:)),...
                            ', sf3=',num2str(optimal_scaling_factor_use3(j,:)),...
                            ', sf4=',num2str(optimal_scaling_factor_use4(j,:)),...
                            ', thr=',num2str(optimal_spike_thr_use(1,j)),...
                            ', kernel scale=',num2str(optimal_kernel_scale_use(1,j)),...
                            ', tau off=',num2str(optimal_tau_off_use(1,j)),...
                            ', offset=',num2str(optimal_offset_use(1,j))]);
                    
                    subplot(6,1,5),plot(time_vector, subtraction_signal);
                    try
                        axis([0 max(time_vector) -1.2*max(original_trace) 1.2*max(original_trace)]);
                    catch
                        axis([0 max(time_vector) 1.2*min(original_trace) 1.2*max(original_trace)]);
                    end
                    title([' residual std = ',num2str(std_subtraction_signal_temp(1,j)), ', SNR = ',num2str(SNR_temp(1,j))],'FontSize',16);
                    
                    subplot(6,1,6),plot(time_vector, reconstituted_time_course_data_best, 'r-');
                    title(['mean firing rate = ',num2str(sum(reconstituted_time_course_data_best)/max(time_vector)),' Hz'],'FontSize',16);
                    axis([0 max(time_vector) -1 2]);
                    xlabel('Time(s)','FontSize',16);
                    
                    saveas(h1,[outputdir,'cell-',num2str(k_use(j), '%04d'),'_reconst_trace.jpg'],'jpg');
                    
                    close(h1);
                    
                    % individual block (48-sec) trace
                    figure_number = ceil(max(time_vector)/block_duration);
                    
                    if figure_number > 1
                    
                        h2 = figure;
                        set(gcf, 'visible', 'off');
                        scrsz = get(0,'ScreenSize');
                        set(gcf,'Position',[1 scrsz(4) scrsz(3) scrsz(4)]);
                        set(gcf,'Color',[1 1 1]);
                        set(gcf, 'PaperPositionMode','auto');
                        pos = get(gcf, 'Position');
                        set(gcf, 'Position',pos);
                        set(gcf, 'InvertHardCopy','off');

                        for i = 1:figure_number

                            start_time = (i-1)*block_duration;
                            last_time = block_duration*i

                            subplot(6,1,1),plot(time_vector, original_trace0);
                            axis([start_time last_time 1.2*min(original_trace0) 1.2*max(original_trace0)]);
                            title(['cell-',num2str(k_use(j))]);

                            subplot(6,1,2),plot(time_vector, fsig_use2(j,:));
                            axis([start_time last_time 1.2*min(fsig_use2(j,:)) 1.2*max(fsig_use2(j,:))]);
                            sampling_freq = 1/dt;
                            if sampling_freq < 10
                                title(['thr1 = ',num2str(optimal_wavelet_thr_use1(j,:)),' (',num2str(optimal_scaling_factor_use1(j,:)),...
                                    ') / max = ',num2str(detail_coefficient_max_use1(j,:)),...
                                    ', thr2 = ',num2str(optimal_wavelet_thr_use2(j,:)),' (',num2str(optimal_scaling_factor_use2(j,:)),...
                                    ') / max = ',num2str(detail_coefficient_max_use2(j,:))]);
                            elseif sampling_freq < 10.5   %10.5
                                title(['thr2 = ',num2str(optimal_wavelet_thr_use2(j,:)),' (',num2str(optimal_scaling_factor_use2(j,:)),...
                                    ') / max = ',num2str(detail_coefficient_max_use2(j,:)),...
                                    ', thr3 = ',num2str(optimal_wavelet_thr_use3(j,:)),' (',num2str(optimal_scaling_factor_use3(j,:)),...
                                    ') / max = ',num2str(detail_coefficient_max_use3(j,:))]);
                            else
                                title(['thr3 = ',num2str(optimal_wavelet_thr_use3(j,:)),' (',num2str(optimal_scaling_factor_use3(j,:)),...
                                    ') / max = ',num2str(detail_coefficient_max_use3(j,:)),...
                                    ', thr4 = ',num2str(optimal_wavelet_thr_use4(j,:)),' (',num2str(optimal_scaling_factor_use4(j,:)),...
                                    ') / max = ',num2str(detail_coefficient_max_use4(j,:))]);
                            end

                            subplot(6,1,3),plot(time_vector, zsig_optimal_use(:,j));
                            hold on;
                            if rem(nt,2) == 1
                                subplot(6,1,3),plot(time_vector,ones(1,nt-1)*threshold_use,'r-');
                                subplot(6,1,3),plot(time_vector,ones(1,nt-1)*2*threshold_use,'r-');
                                subplot(6,1,3),plot(time_vector,ones(1,nt-1)*3*threshold_use,'r-');
                                subplot(6,1,3),plot(time_vector,ones(1,nt-1)*4*threshold_use,'r-');
                                subplot(6,1,3),plot(time_vector,ones(1,nt-1)*5*threshold_use,'b-');
                                subplot(6,1,3),plot(time_vector,ones(1,nt-1)*6*threshold_use,'r-');
                                subplot(6,1,3),plot(time_vector,ones(1,nt-1)*7*threshold_use,'r-');
                                subplot(6,1,3),plot(time_vector,ones(1,nt-1)*8*threshold_use,'r-');
                                subplot(6,1,3),plot(time_vector,ones(1,nt-1)*9*threshold_use,'r-');
                                subplot(6,1,3),plot(time_vector,ones(1,nt-1)*10*threshold_use,'r-');
                                hold off;
                                if 1.2*max(zsig_optimal_use_nt1(:,j)) > 10
                                    ymax = 10;
                                else
                                    ymax = 1.2*max(zsig_optimal_use_nt1(:,j));
                                end
                                if ymax > 2
                                    ymin = -2;
                                else
                                    ymin = -ymax;
                                end
                                axis([start_time last_time ymin ymax]);
                                title(['R = ',num2str(C_best(2,1)),...
                                    ', threshold = ',num2str(optimal_spike_thr_use(1,j))]);
                            else
                                subplot(6,1,3),plot(time_vector,ones(1,nt)*threshold_use,'r-');
                                subplot(6,1,3),plot(time_vector,ones(1,nt)*2*threshold_use,'r-');
                                subplot(6,1,3),plot(time_vector,ones(1,nt)*3*threshold_use,'r-');
                                subplot(6,1,3),plot(time_vector,ones(1,nt)*4*threshold_use,'r-');
                                subplot(6,1,3),plot(time_vector,ones(1,nt)*5*threshold_use,'b-');
                                subplot(6,1,3),plot(time_vector,ones(1,nt)*6*threshold_use,'r-');
                                subplot(6,1,3),plot(time_vector,ones(1,nt)*7*threshold_use,'r-');
                                subplot(6,1,3),plot(time_vector,ones(1,nt)*8*threshold_use,'r-');
                                subplot(6,1,3),plot(time_vector,ones(1,nt)*9*threshold_use,'r-');
                                subplot(6,1,3),plot(time_vector,ones(1,nt)*10*threshold_use,'r-');
                                hold off;
                                if 1.2*max(zsig_optimal_use_nt(:,j)) > 10
                                    ymax = 10;
                                else
                                    ymax = 1.2*max(zsig_optimal_use_nt(:,j));
                                end
                                if ymax > 2
                                    ymin = -2;
                                else
                                    ymin = -ymax;
                                end
                                axis([start_time last_time ymin ymax]);
                                title(['R = ',num2str(C_best(2,1)),...
                                    ', threshold = ',num2str(optimal_spike_thr_use(1,j))]);
                            end

                            subplot(6,1,4),plot(time_vector, C_reconst_best2_temp(j,:), 'r');
                            hold on
                            subplot(6,1,4),plot(time_vector, original_trace);
                            hold off
                            axis([start_time last_time 1.2*min(original_trace) 1.2*max(original_trace)]);
                            title(['sf1 = ',num2str(optimal_scaling_factor_use1(j,:)),...
                                    ', sf2 = ',num2str(optimal_scaling_factor_use2(j,:)),...
                                    ', sf3 = ',num2str(optimal_scaling_factor_use3(j,:)),...
                                    ', sf4 = ',num2str(optimal_scaling_factor_use4(j,:)),...
                                    ', thr = ',num2str(optimal_spike_thr_use(1,j)),...
                                    ', tau off = ',num2str(optimal_tau_off_use(1,j)),...
                                    ', kernel scale = ',num2str(optimal_kernel_scale_use(1,j))]);

                            subplot(6,1,5),plot(time_vector, subtraction_signal);
                            try
                                axis([start_time last_time -1.2*max(original_trace) 1.2*max(original_trace)]);
                            catch
                                axis([start_time last_time 1.2*min(original_trace) 1.2*max(original_trace)]);
                            end
                            xlabel('Time(s)');

                            subplot(6,1,6),plot(time_vector, reconstituted_time_course_data_best, 'r-');
                            title(['mean firing rate = ',num2str(sum(reconstituted_time_course_data_best)/max(time_vector)),' Hz'],'FontSize',16);
                            axis([start_time last_time -1 2]);
                            xlabel('Time(s)');

                            saveas(h2,[outputdir,'cell-',num2str(k_use(j), '%04d'),'_reconst_trace-',num2str(i),'.jpg'],'jpg');

                        end
                        close(h2);
                    end
                end
            end
            
            for jj = 1:length(k_use)
                obj.original_trace_offset(jj,:) = IC_sig_to_be_analyzed_use(jj,:) + optimal_offset_use(1,jj);
            end
            obj.std_subtraction_signal = std_subtraction_signal_temp;
            obj.C_reconst_best2        = C_reconst_best2_temp;
            obj.spike_time             = spike_time_temp;
            obj.CC_max_value           = CC_max_value_temp;
            obj.SNR                    = SNR_temp;
            obj.baseline_std           = baseline_std_temp;
            obj.false_events           = false_events_temp;
            obj.shifted_spikes         = shifted_spikes_temp;

            % adjust time 
            for i = 1:total_IC_number
                spike_time_temp = obj.spike_time{i};
                obj.spike_time_sec{i} = spike_time_temp*data.dt;
            end

        end

        % ----------------------------------------------------------------
        function compute_mean_firing_rate(obj, data)
        %
        % INPUTs
        %   obj.spike_time
        %   obj.outputdir_cs
        %   obj.cell_sig_delta_R_over_R0
        %   data.dt
        %
        % OUTPUTs
        %   obj.spike_rate
        %
        
            % make an output directory
            outputdir = [obj.outputdir_cs,'/03_spike_rate/'];
            if isempty(dir(outputdir))
                mkdir([obj.outputdir_cs,'/03_spike_rate/']);
            end
            
            h1 = figure;
            set(gcf, 'visible', 'off');
            scrsz = get(0,'ScreenSize');
            set(gcf,'Position',[1 scrsz(4) scrsz(3)/2 scrsz(4)/2]);
            set(gcf,'Color',[1 1 1]);
            set(gcf, 'PaperPositionMode','auto');
            pos = get(gcf, 'Position');
            set(gcf, 'Position',pos);
            set(gcf, 'InvertHardCopy','off');
            
            spike_time_use = obj.spike_time;

            time_vector = [0:size(obj.cell_sig_delta_R_over_R0,2)]*data.dt;

            spike_rate_all = zeros(size(spike_time_use,1),1);

            for index_cell = 1:size(spike_time_use,2)
                spike_rate_all(index_cell,1) = size(spike_time_use{1,index_cell},1)/max(time_vector);
            end

            obj.spike_rate = spike_rate_all;
            
            histogram(spike_rate_all,10);
            xlim([0 3]);
            xlabel('Firing rate (Hz)','FontSize',20);
            title([num2str(mean(spike_rate_all),'%.2f'),' +/- ',num2str(std(spike_rate_all),'%.2f'),' Hz'])
            formataxes;
            
            saveas(h1,[outputdir,'firing_rate.jpg'],'jpg');
            
            close(h1);
            
            %%%%%%%%%%%%%%%%%%%
            function formataxes

                set(gca,'FontSize',24,'FontName','Helvetica',...
                    'LineWidth',1.5,'TickLength',[1,1]*.005,'tickdir','out')
                set(gcf,'Color','w','PaperPositionMode','auto')

            end

        end
        
    end
    
    methods(Static)
        
    end
    
end